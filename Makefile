# ================================================================================================
# TCP Hollywood paper Makefile
# Based on a generic version by Colin Perkins <csp@csperkins.org>:
#   https://github.com/csperkins/paper-template
# ================================================================================================

# TCP Hollywood kernel
# TCPH_KERNEL_REV will be checked out from TCPH_KERNEL_REPO, and installed
# on top of a clean Ubuntu 14.04 LTS build. If TCPH_KERNEL_KEY is specified,
# it will be used to access TCPH_KERNEL_REPO.
# TCPH_KERNEL_KEY is a path within the stage1 directory.

TCPH_KERNEL_REPO = git@github.com:lumisota/tcp-hollywood-linux.git
TCPH_KERNEL_REV  = 0bb4a643
TCPH_KERNEL_KEY  = id_rsa

# TCP Hollywood intermediary layer
# TCPH_API_REV will be checked out from TCPH_API_REPO, and installed
# within a box with the TCP Hollywood kernel (specified above) already
# installed.
# TCPH_API_KEY is a path within the stage2 directory.

TCPH_API_REPO = git@github.com:lumisota/hollywood-api-video.git
TCPH_API_REV  = 325c415f4492d0eeebc96af87bca94826aed1d75
TCPH_API_KEY  = id_rsa

# LaTeX sources

TEX_BASE      = dash_hollywood
TEX_STATIC    = sections/*
TEX_GENERATED = 

# Graphics generated by this Makefile in Stage 4/5, and removed by clean

RUN_NUMBERS = 1 2 #3 4 5 6 7 8 9 10
PROTOCOLS   = tcp-1 tcph-0.9

# Single network condition evaluations

SN_PROFILES = r5lp2d150   r5lp2d200   r5lp2d250   r5lp2d300   r5lp2d350  \
              r5lp2d400   r5d100l0p2  r5d100l0p4  r5d100l0p6  r5d100l0p8 \
              r5d100l1p0
SN_RUNS     = $(foreach PROTOCOL,$(PROTOCOLS),$(foreach RUN_NUMBER,$(RUN_NUMBERS),$(foreach PROFILE, $(SN_PROFILES), sn-$(PROTOCOL)-oo-16000-bola-$(PROFILE)-$(RUN_NUMBER))))
                  
# Variable network conditions evaluations

VN_PROFILES = np2a np2b np2c np2d np2e np2f np2g np2h np2i np2j np2k np2l
VN_RUNS     = $(foreach PROTOCOL,$(PROTOCOLS),$(foreach RUN_NUMBER,$(RUN_NUMBERS),$(foreach PROFILE, $(VN_PROFILES), vn-$(PROTOCOL)-oo-16000-bola-$(PROFILE)-$(RUN_NUMBER))))

ALL_RUNS    = $(SN_RUNS) $(VN_RUNS)

GRAPHICS_GENERATED = figures/results/stall_sn_loss_p2.pdf \
                     figures/results/stall_sn_delay_d100.pdf \
                     figures/results/startup_sn_loss_p2.pdf \
                     figures/results/startup_sn_delay_d100.pdf \
                     figures/results/ratedrops_sn_loss_p2.pdf \
                     figures/results/ratedrops_sn_delay_d100.pdf \
                     figures/results/bitrate_sn_loss_p2.pdf \
                     figures/results/bitrate_sn_delay_d100.pdf \
                     figures/results/qoe_sn_loss_p2.png \
                     figures/results/qoe_sn_delay_d100.png \
                     figures/results/stall_vn_all.pdf \
                     figures/results/startup_vn_all.pdf \
                     figures/results/ratedrops_vn_all.pdf \
                     figures/results/bitrate_vn_all.pdf \
                     figures/results/qoe_vn_all.png \
                     figures/results/timeline_example_vn.pdf \
                     
# Graphics needed for the paper, but not generated by this Makefile

GRAPHICS_STATIC = figures/tcph-download.pdf \
                  figures/terminology2.pdf \
                  
# Files/directories generated by each stage, and removed by clean

STAGE1_OUTPUT    = stage1/hollywood-$(TCPH_KERNEL_REV).box

STAGE2_OUTPUT    = stage2/hollywood-$(TCPH_KERNEL_REV)-$(TCPH_API_REV)-libs.box

STAGE3_OTHER_DIR = stage3/BBB_8bitrates_hd

STAGE3_OUTPUT    = $(ALL_RUNS:%=stage3/data/%.aclient-out) \
                   $(ALL_RUNS:%=stage3/data/%.aserver-out) \
                   $(ALL_RUNS:%=stage3/data/%.aserver-tcpdump) \
                   $(ALL_RUNS:%=stage3/data/%-ssim.log) \
                   $(ALL_RUNS:%=stage3/data/%-psnr.log) \

STAGE4_OUTPUT    = stage4/data/sn_qos_stats.csv \
                   stage4/data/sn_rate_changes.csv \
                   stage4/data/sn_frame_ssim.csv \
                   stage4/data/sn_frame_psnr.csv \
                   stage4/data/vn_qos_stats.csv \
                   stage4/data/vn_rate_changes.csv \
                   stage4/data/vn_frame_ssim.csv \
                   stage4/data/vn_frame_psnr.csv \

# all target

all: $(STAGE1_OUTPUT) $(STAGE2_OUTPUT) $(STAGE3_OUTPUT) $(STAGE4_OUTPUT) $(GRAPHICS_GENERATED) $(TEX_BASE).pdf

print-%  : ; @echo $* = $($*)

# ================================================================================================
# Stage 0: Fetch TCP Hollywood kernel source code
# ================================================================================================
# The Linux kernel contains case-sensitive filenames; checking out $(TCPH_KERNEL_REPO)
# directly on case-preserving file systems would result in build errors. In this stage,
# the source code is fetched within an Ubuntu 16.04 virtual machine, and compressed. 
# This can then be used in Stage 1.
# ================================================================================================

stage0/hollywood-$(TCPH_KERNEL_REV).tar.gz: stage0/Vagrantfile
	@echo "================================================================================"
	@echo "== Building $@"
	export VAGRANT_CWD=stage0 && vagrant up
	export VAGRANT_CWD=stage0 && vagrant ssh -c "sudo apt-get install git -y"
	export VAGRANT_CWD=stage0 && vagrant ssh -c "bash /vagrant/bin/fetch-tcph.sh $(TCPH_KERNEL_REPO) $(TCPH_KERNEL_KEY) $(TCPH_KERNEL_REV)"
	export VAGRANT_CWD=stage0 && vagrant halt
	export VAGRANT_CWD=stage0 && vagrant destroy -f
	@echo "^^ Finished building $@"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

# ================================================================================================
# Stage 1: TCP Hollywood Vagrant box creation
# ================================================================================================

stage1/hollywood-$(TCPH_KERNEL_REV).box: stage0/hollywood-$(TCPH_KERNEL_REV).tar.gz stage1/bin/tcph-install.sh stage1/bin/box-setup.sh stage1/Vagrantfile stage1/grub
	@echo "================================================================================"
	@echo "== Building $@"
	cp -f stage0/hollywood-$(TCPH_KERNEL_REV).tar.gz stage1/hollywood-$(TCPH_KERNEL_REV).tar.gz
	export VAGRANT_CWD=stage1 && vagrant up
	export VAGRANT_CWD=stage1 && vagrant ssh -c "bash /vagrant/bin/tcph-install.sh $(TCPH_KERNEL_REV)"
	rm -f $@ && export VAGRANT_CWD=stage1 && vagrant package --output $@
	export VAGRANT_CWD=stage1 && vagrant halt
	export VAGRANT_CWD=stage1 && vagrant destroy -f
	# exports stage 2 environment variables as they may be needed to halt any existing
	# VMs using the box being removed
	# Built box will be added to Vagrant's list of boxes as part of stage 2
	-export $(STAGE2_EXPORT) && vagrant box remove hollywood-$(TCPH_KERNEL_REV) --force
	@echo "^^ Finished building $@"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

stage1-get:
	@echo "================================================================================"
	@echo "== Fetching https://smcquistin.uk/hollywood/hollywood-$(TCPH_KERNEL_REV).box"
	@curl -f -o stage1/hollywood-$(TCPH_KERNEL_REV).box https://smcquistin.uk/hollywood/hollywood-$(TCPH_KERNEL_REV).box
	@echo "^^ Fetched https://smcquistin.uk/hollywood/hollywood-$(TCPH_KERNEL_REV).box"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

# ================================================================================================
# Stage 2: TCP Hollywood API and evaluation library installation
# ================================================================================================
    
STAGE2_EXPORT = VAGRANT_CWD=stage2 TCPH_KERNEL_REV=$(TCPH_KERNEL_REV) TCPH_API_REPO=$(TCPH_API_REPO)

stage2/hollywood-$(TCPH_API_REV)-libs:
	@echo "================================================================================"
	@echo "== Cloning $(TCPH_API_REPO) (revision $(TCPH_API_REV)) into $@"
	ssh-agent bash -c 'chmod 400 stage2/$(TCPH_API_KEY); ssh-add stage2/$(TCPH_API_KEY); git clone $(TCPH_API_REPO) $@; cd $@; git checkout $(TCPH_API_REV)'
	@echo "^^ Finished cloning $(TCPH_API_REPO) (revision $(TCPH_API_REV)) into $@"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

stage2/hollywood-$(TCPH_KERNEL_REV)-$(TCPH_API_REV)-libs.box: stage2/hollywood-$(TCPH_API_REV)-libs stage1/hollywood-$(TCPH_KERNEL_REV).box stage2/bin/box-setup.sh stage2/Vagrantfile
	@echo "================================================================================"
	@echo "== Building $@"
	export $(STAGE2_EXPORT) && vagrant up
	export $(STAGE2_EXPORT) && vagrant ssh -c "cp -r /vagrant/hollywood-$(TCPH_API_REV)-libs ~/hollywood-api"
	export $(STAGE2_EXPORT) && vagrant ssh -c "bash /vagrant/bin/box-setup.sh"
	rm -f $@ && export $(STAGE2_EXPORT) && vagrant package --output $@
	export $(STAGE2_EXPORT) && vagrant halt
	export $(STAGE2_EXPORT) && vagrant destroy -f
	# exports stage 3 environment variables as they may be needed to halt any existing
	# VMs using the box being removed
	# Built box will be added to Vagrant's list of boxes as part of stage 2
	export $(STAGE3_EXPORT) && if [ -f hollywood-$(TCPH_KERNEL_REV)-$(TCPH_API_REV)-libs ]; then \
	  vagrant box remove hollywood-$(TCPH_KERNEL_REV)-$(TCPH_API_REV)-libs --force; \
	fi
	@echo "^^ Finished building $@"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

# ================================================================================================
# Stage 3: TCP Hollywood Vagrant box instantiation
# ================================================================================================

STAGE3_EXPORT = VAGRANT_CWD=stage3

stage3/data:
	mkdir $@

stage3/BBB_8bitrates_hd.tar.gz: 
	@echo "================================================================================"
	@echo "== Fetching http://www.netlab.tkk.fi/tutkimus/rtc/BBB_8bitrates_hd.tar.gz"
	@curl -f -o stage3/BBB_8bitrates_hd.tar.gz http://www.netlab.tkk.fi/tutkimus/rtc/BBB_8bitrates_hd.tar.gz
	@echo "^^ Fetched http://www.netlab.tkk.fi/tutkimus/rtc/BBB_8bitrates_hd.tar.gz"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

stage3/BBB_8bitrates_hd: stage3/BBB_8bitrates_hd.tar.gz
	@echo "================================================================================"
	@echo "== Extracting stage3/BBB_8bitrates_hd.tar.gz"
	@tar -xvzf stage3/BBB_8bitrates_hd.tar.gz -C stage3
	@echo "^^ Extracted stage3/BBB_8bitrates_hd.tar.gz"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

stage3/big_buck_bunny_1080p.y4m.xz:
	@echo "================================================================================"
	@echo "== Fetching https://www.smcquistin.uk/big_buck_bunny_1080p24.y4m.xz"
	@curl -f -o stage3/big_buck_bunny_1080p.y4m.xz https://www.smcquistin.uk/big_buck_bunny_1080p24.y4m.xz
	@echo "^^ Fetched https://www.smcquistin.uk/big_buck_bunny_1080p24.y4m.xz"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

stage3/big_buck_bunny_1080p.y4m: stage3/big_buck_bunny_1080p.y4m.xz
	@echo "================================================================================"
	@echo "== Extracting stage3/big_buck_bunny_1080p.y4m.xz"
	@xz -d -k -f --verbose stage3/big_buck_bunny_1080p.y4m.xz
	@echo "^^ Extracted stage3/big_buck_bunny_1080p.y4m.xz"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

stage3/Vagrantfile-$(TCPH_KERNEL_REV)-$(TCPH_API_REV): stage3/Vagrantfile.in
	cat $< | sed 's/TCPH_KERNEL_REV/$(TCPH_KERNEL_REV)/' | sed 's/TCPH_API_REV/$(TCPH_API_REV)/' > $@

stage3/data/sn-%.aclient-out stage3/data/sn-%.aserver-out stage3/data/sn-%.aserver-tcpdump stage3/data/sn-%-ssim.log stage3/data/sn-%-psnr.log: stage3/Vagrantfile-$(TCPH_KERNEL_REV)-$(TCPH_API_REV) stage3/scripts/dash-evaluation-linear-stablenetwork.py stage2/hollywood-$(TCPH_KERNEL_REV)-$(TCPH_API_REV)-libs.box | stage3/BBB_8bitrates_hd stage3/big_buck_bunny_1080p.y4m stage3/data 
	@echo "================================================================================"
	@echo "== Building $@"
	@echo "== `date`"
	mkdir -p stage3/sn-$*
	mkdir -p stage3/sn-$*/data
	cp -R stage3/profiles stage3/sn-$*/profiles
	cp -R stage3/scripts stage3/sn-$*/scripts
	cp -R stage3/BBB_8bitrates_hd stage3/sn-$*/BBB_8bitrates_hd
	cp stage3/Vagrantfile-$(TCPH_KERNEL_REV)-$(TCPH_API_REV) stage3/sn-$*/Vagrantfile
	export VAGRANT_CWD=stage3/sn-$* && vagrant up
	-export VAGRANT_CWD=stage3/sn-$* && vagrant ssh -c "cp -R /vagrant/BBB_8bitrates_hd ."
	-export VAGRANT_CWD=stage3/sn-$* && vagrant ssh -c "cp ~/hollywood-api/httpc ."
	-export VAGRANT_CWD=stage3/sn-$* && vagrant ssh -c "cp ~/hollywood-api/httptl ."
	-export VAGRANT_CWD=stage3/sn-$* && vagrant ssh -c "sudo python /vagrant/scripts/dash-evaluation-linear-stablenetwork.py sn-$*"
	-export VAGRANT_CWD=stage3/sn-$* && vagrant halt
	-export VAGRANT_CWD=stage3/sn-$* && vagrant destroy -f 
	@echo "^^ Finished building $@"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
	ffmpeg -i stage3/sn-$*/data/received.ts -i stage3/big_buck_bunny_1080p.y4m -lavfi 'ssim=stats_file=stage3/sn-$*/data/sn-$*-ssim.log;[0:v][1:v]psnr=stats_file=stage3/sn-$*/data/sn-$*-psnr.log' -f null -
	rm stage3/sn-$*/data/received.ts
	cp stage3/sn-$*/data/* stage3/data/
	rm -rf stage3/sn-$*
	
stage3/data/vn-%.aclient-out stage3/data/vn-%.aserver-out stage3/data/vn-%.aserver-tcpdump stage3/data/vn-%-ssim.log stage3/data/vn-%-psnr.log: stage3/Vagrantfile-$(TCPH_KERNEL_REV)-$(TCPH_API_REV) stage3/scripts/dash-evaluation-linear-untimed.py stage2/hollywood-$(TCPH_KERNEL_REV)-$(TCPH_API_REV)-libs.box | stage3/BBB_8bitrates_hd stage3/big_buck_bunny_1080p.y4m stage3/data 
	@echo "================================================================================"
	@echo "== Building $@"
	@echo "== `date`"
	mkdir -p stage3/vn-$*
	mkdir -p stage3/vn-$*/data
	cp -R stage3/profiles stage3/vn-$*/profiles
	cp -R stage3/scripts stage3/vn-$*/scripts
	cp -R stage3/BBB_8bitrates_hd stage3/vn-$*/BBB_8bitrates_hd
	cp stage3/Vagrantfile-$(TCPH_KERNEL_REV)-$(TCPH_API_REV) stage3/vn-$*/Vagrantfile
	export VAGRANT_CWD=stage3/vn-$* && vagrant up
	-export VAGRANT_CWD=stage3/vn-$* && vagrant ssh -c "cp -R /vagrant/BBB_8bitrates_hd ."
	-export VAGRANT_CWD=stage3/vn-$* && vagrant ssh -c "cp ~/hollywood-api/httpc ."
	-export VAGRANT_CWD=stage3/vn-$* && vagrant ssh -c "cp ~/hollywood-api/httptl ."
	-export VAGRANT_CWD=stage3/vn-$* && vagrant ssh -c "sudo python /vagrant/scripts/dash-evaluation-linear-untimed.py vn-$*"
	-export VAGRANT_CWD=stage3/vn-$* && vagrant halt
	-export VAGRANT_CWD=stage3/vn-$* && vagrant destroy -f 
	@echo "^^ Finished building $@"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
	ffmpeg -i stage3/vn-$*/data/received.ts -i stage3/big_buck_bunny_1080p.y4m -lavfi 'ssim=stats_file=stage3/vn-$*/data/vn-$*-ssim.log;[0:v][1:v]psnr=stats_file=stage3/vn-$*/data/vn-$*-psnr.log' -f null -
	rm stage3/vn-$*/data/received.ts
	cp stage3/vn-$*/data/* stage3/data/
	rm -rf stage3/vn-$*

# ================================================================================================
# Stage 4: Testbed results post-processing
# ================================================================================================

stage4/data:
	mkdir $@

stage4/data/sn_rate_changes.csv: $(foreach RUN,$(SN_RUNS), stage3/data/$(RUN).aclient-out) stage4/extract_rate_changes.py | stage4/data
	@echo "================================================================================"
	@echo "== Building $@"
	echo "prot prebuf net algo rxbufratio upswitch downswitch av.rate sd.rate lastswitch lastrate totalchunksc" > $@
	for client_log in $(foreach RUN,$(SN_RUNS), stage3/data/$(RUN).aclient-out); do \
	    python2.7 stage4/extract_rate_changes.py $$client_log >> $@; \
	done
	@echo "^^ Finished building $@"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

stage4/data/sn_qos_stats.csv: $(foreach RUN,$(SN_RUNS), stage3/data/$(RUN).aclient-out) stage4/extract_profile_name.py stage4/extract_qos.R | stage4/data
	@echo "================================================================================"
	@echo "== Building $@"
	grep ALL $(foreach RUN,$(SN_RUNS), stage3/data/$(RUN).aclient-out) > tmp2
	sed 's"^.*dash10s-.*000-""g;s"^.*dash-.*000-""g' tmp2 > tmp
	sed 's":ALL.1""g' tmp > tmp2
	python2.7 stage4/extract_profile_name.py tmp2 > tmp
	Rscript stage4/extract_qos.R tmp $@
	rm tmp tmp2
	@echo "^^ Finished building $@"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

stage4/data/sn_frame_ssim.csv: $(foreach RUN,$(SN_RUNS), stage3/data/$(RUN)-ssim.log) stage4/extract_qoe_data.py | stage4/data
	@echo "================================================================================"
	@echo "== Building $@"
	for client_log in $(foreach RUN,$(SN_RUNS), stage3/data/$(RUN)-ssim.log); do \
        python2.7 stage4/extract_qoe_data.py $$client_log ssim >> $@; \
    done
	@echo "^^ Finished building $@"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

stage4/data/sn_frame_psnr.csv: $(foreach RUN,$(SN_RUNS), stage3/data/$(RUN)-psnr.log) stage4/extract_qoe_data.py | stage4/data
	@echo "================================================================================"
	@echo "== Building $@"
	for client_log in $(foreach RUN,$(SN_RUNS), stage3/data/$(RUN)-psnr.log); do \
        python2.7 stage4/extract_qoe_data.py $$client_log psnr >> $@; \
	done
	@echo "^^ Finished building $@"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  
stage4/data/vn_rate_changes.csv: $(foreach RUN,$(VN_RUNS), stage3/data/$(RUN).aclient-out) stage4/extract_rate_changes.py | stage4/data
	@echo "================================================================================"
	@echo "== Building $@"
	echo "prot prebuf net algo rxbufratio upswitch downswitch av.rate sd.rate lastswitch lastrate totalchunksc" > $@
	for client_log in $(foreach RUN,$(VN_RUNS), stage3/data/$(RUN).aclient-out); do \
	    python2.7 stage4/extract_rate_changes.py $$client_log >> $@; \
	done
	@echo "^^ Finished building $@"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

stage4/data/vn_qos_stats.csv: $(foreach RUN,$(VN_RUNS), stage3/data/$(RUN).aclient-out) stage4/extract_profile_name.py stage4/extract_qos.R | stage4/data
	@echo "================================================================================"
	@echo "== Building $@"
	grep ALL $(foreach RUN,$(VN_RUNS), stage3/data/$(RUN).aclient-out) > tmp2
	sed 's"^.*dash10s-.*000-""g;s"^.*dash-.*000-""g' tmp2 > tmp
	sed 's":ALL.1""g' tmp > tmp2
	python2.7 stage4/extract_profile_name.py tmp2 > tmp
	Rscript stage4/extract_qos.R tmp $@
	rm tmp tmp2
	@echo "^^ Finished building $@"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
	
stage4/data/vn_frame_ssim.csv: $(foreach RUN,$(VN_RUNS), stage3/data/$(RUN)-ssim.log) stage4/extract_qoe_data.py | stage4/data
	@echo "================================================================================"
	@echo "== Building $@"
	for client_log in $(foreach RUN,$(VN_RUNS), stage3/data/$(RUN)-ssim.log); do \
        python2.7 stage4/extract_qoe_data.py $$client_log ssim >> $@; \
	done
	@echo "^^ Finished building $@"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
    
stage4/data/vn_frame_psnr.csv: $(foreach RUN,$(VN_RUNS), stage3/data/$(RUN)-psnr.log) stage4/extract_qoe_data.py | stage4/data
	@echo "================================================================================"
	@echo "== Building $@"
	for client_log in $(foreach RUN,$(VN_RUNS), stage3/data/$(RUN)-psnr.log); do \
        python2.7 stage4/extract_qoe_data.py $$client_log psnr >> $@; \
	done
	@echo "^^ Finished building $@"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

stage4/data/vn_timeline_example.csv: stage3/data/vn-tcp-1-oo-16000-bola-np2g-1.aclient-out stage3/data/vn-tcph-0.9-oo-16000-bola-np2g-1.aclient-out stage4/add_linerate_to_buffer.py | stage4/data
	@echo "================================================================================"
	@echo "== Building $@"
	python2.7 stage4/add_linerate_to_buffer.py stage3/data/vn-tcph-0.9-oo-16000-bola-np2g-1.aclient-out > $@
	python2.7 stage4/add_linerate_to_buffer.py stage3/data/vn-tcp-1-oo-16000-bola-np2g-1.aclient-out >> $@
	@echo "^^ Finished building $@"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

# ================================================================================================
# Stage 5: Graphic generation
# ================================================================================================

figures/results:
	mkdir $@

figures/results/stall_sn_%.pdf figures/results/startup_sn_%.pdf figures/results/ratedrops_sn_%.pdf figures/results/bitrate_sn_%.pdf: stage4/data/sn_rate_changes.csv stage4/data/sn_qos_stats.csv stage5/generate_singlenet_qos_plots.R | figures/results
	@echo "================================================================================"
	@echo "== Drawing $@"
	Rscript stage5/generate_singlenet_qos_plots.R
	@echo "^^ Finished drawing $@"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

figures/results/stall_vn_all.pdf figures/results/startup_vn_all.pdf figures/results/ratedrops_vn_all.pdf figures/results/bitrate_vn_all.pdf: stage4/data/vn_rate_changes.csv stage4/data/vn_qos_stats.csv stage5/generate_profiles_qos_plots.R | figures/results
	@echo "================================================================================"
	@echo "== Drawing $@"
	Rscript stage5/generate_profiles_qos_plots.R
	@echo "^^ Finished drawing $@"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

figures/results/qoe_sn_loss_p2.png figures/results/qoe_sn_delay_d100.png figures/results/qoe_vn_all.png: stage4/data/sn_frame_ssim.csv stage4/data/sn_frame_psnr.csv stage4/data/vn_frame_ssim.csv stage4/data/vn_frame_psnr.csv stage5/networks.csv stage5/plot_qoe_multiplot.R | figures/results
	@echo "================================================================================"
	@echo "== Drawing $@"
	Rscript stage5/plot_qoe_multiplot.R
	@echo "^^ Finished drawing $@"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

figures/results/timeline_example_vn.pdf: stage4/data/vn_timeline_example.csv stage5/plot_adaptation_timeline.R | figures/results
	@echo "================================================================================"
	@echo "== Drawing $@"
	Rscript stage5/plot_adaptation_timeline.R
	@echo "^^ Finished drawing $@"
	@echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

# ================================================================================================
# Stage 6: Paper generation
# ================================================================================================

%.pdf: %.tex %.bib $(TEX_STATIC) $(TEX_GENERATED) $(GRAPHICS_STATIC) $(GRAPHICS_GENERATED) $(OTHER_GENERATED)
	@bin/latex-build.sh     $(TEX_BASE)
	@bin/check-pdf-fonts.sh $(TEX_BASE).pdf $(TEX_BASE).fonts
	@bin/check-for-duplicate-words.sh $(TEX_BASE).tex $(TEX_STATIC) $(TEX_GENERATED)
	@bin/check-for-weasel-words.sh    $(TEX_BASE).tex $(TEX_STATIC) $(TEX_GENERATED)
	@bin/check-for-todo.sh            $(TEX_BASE).tex $(TEX_STATIC) $(TEX_GENERATED)

# ================================================================================================
# Clean-up targets
# ================================================================================================

define xargs
$(if $(2),$(1) $(wordlist 1,1000,$(2)))
$(if $(word 1001,$(2)),$(call xargs,$(1),$(wordlist 1001,$(words $(2)),$(2))))
endef

define rm
$(call xargs,rm -f,$(1))
endef

stage1-clean:
	export VAGRANT_CWD=stage1 && vagrant halt
	-export VAGRANT_CWD=stage1 && vagrant destroy -f
	$(call rm,$(STAGE1_OUTPUT))

stage2-clean:
	export $(STAGE2_EXPORT) && vagrant halt
	-export $(STAGE2_EXPORT) && vagrant destroy -f 
	$(call rm,$(STAGE2_OUTPUT))

stage3-shutdown:
	@for dir in $(ALL_RUNS:%=stage3/%); do \
		 if [ -d $$dir ]; then \
		   echo "*** shutdown VM in $$dir"; \
			 export VAGRANT_CWD=$$dir && vagrant halt; \
			 -export VAGRANT_CWD=$$dir && vagrant destroy -f; \
		 fi; \
	 done

stage3-clean: stage3-shutdown
	$(call rm,$(STAGE3_OUTPUT))
	rm -fr $(ALL_RUNS:%=stage3/%)
	rm -fr $(STAGE3_OTHER_DIR)
	rm -f  stage3/Vagrantfile-$(TCPH_KERNEL_REV)-$(TCPH_API_REV)
	-rmdir stage3/data

stage4-clean:
	$(call rm,$(STAGE4_OUTPUT))
	-rmdir stage4/data

stage5-clean:
	$(call rm,$(STAGE5_OUTPUT))
	$(call rm,$(GRAPHICS_GENERATED))
	-rmdir figures/results

stage6-clean:
	$(call rm,$(TEX_BASE).pdf)
	$(call rm,$(TEX_BASE).aux)
	$(call rm,$(TEX_BASE).log)
	$(call rm,$(TEX_BASE).blg)
	$(call rm,$(TEX_BASE).bbl)
	$(call rm,$(TEX_BASE).out)
	$(call rm,$(TEX_BASE).fonts)
	$(call rm,$(TEX_GENERATED))

clean: stage1-clean stage2-clean stage3-clean stage4-clean stage5-clean stage6-clean

